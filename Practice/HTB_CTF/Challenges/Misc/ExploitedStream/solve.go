package main

import (
	"encoding/hex"
	"fmt"
	"os"
	"sync"

	"github.com/ambalabanov/ctr"
	"github.com/ambalabanov/kdf"
)

var wg sync.WaitGroup

func main() {

	fWordlist := []string{"utf8", "final", "cGFzc3dvcmRfaXNfdGhlX25hbWVfb2Zfb25lX25wbV9wYWNrYWdl", "length", "charAt", "charCodeAt", "slice", "replace", "substring", "83729c4575f56a8287c0b4e8ee5c33f8cb891ccaddcafb71ef5f7bd067f19d854ab16e0cb22460", "xor", "argv", "log", "crypto", "aes-256-ctr", "createDecipher", "update", "hex"}
	for i:=0;i < len(fWordlist); i++ {
		pass := fWordlist[i]
		wg.Add(1)
		go brute(pass)

	}
	wg.Wait()
}
func brute(pass string) {
	cipherText := "83729c4575f56a8287c0b4e8ee5c33f8cb891ccaddcafb71ef5f7bd067f19d854ab16e0cb22460"
	cipherTextDecoded, _ := hex.DecodeString(cipherText)
	key := kdf.Kdf(pass, 48)[:32]
	iv := kdf.Kdf(pass, 48)[32:]
	plain := string(ctr.Crypt(cipherTextDecoded, key, iv))
	fmt.Println(plain)
	if plain[:4] == "HTB{" {
		fmt.Println("Congratz!!!")
		fmt.Println("Pass:" + "\t" + pass)
		fmt.Println("Key:" + "\t" + hex.EncodeToString(key))
		fmt.Println("IV:" + "\t" + hex.EncodeToString(iv))
		fmt.Println("Plain:" + "\t" + plain)
		os.Exit(0)
	}
	wg.Done()
}