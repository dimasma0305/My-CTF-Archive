from z3 import *
# reference: https://sechack.tistory.com/85

s = [BitVec('s%i'%i, 8) for i in range(55)]
print(s)
s1 = Solver()

s1.add((s[0] - 33) <= 0x5D)
s1.add((s[1] - 33) <= 0x5D)
s1.add((s[2] - 33) <= 0x5D)
s1.add((s[3] - 33) <= 0x5D)
s1.add((s[4] - 33) <= 0x5D)
s1.add((s[5] - 33) <= 0x5D)
s1.add((s[6] - 33) <= 0x5D)
s1.add((s[7] - 33) <= 0x5D)
s1.add((s[8] - 33) <= 0x5D)
s1.add((s[9] - 33) <= 0x5D)
s1.add((s[10] - 33) <= 0x5D)
s1.add((s[11] - 33) <= 0x5D)
s1.add((s[12] - 33) <= 0x5D)
s1.add((s[13] - 33) <= 0x5D)
s1.add((s[14] - 33) <= 0x5D)
s1.add((s[15] - 33) <= 0x5D)
s1.add((s[16] - 33) <= 0x5D)
s1.add((s[17] - 33) <= 0x5D)
s1.add((s[18] - 33) <= 0x5D)
s1.add((s[19] - 33) <= 0x5D)
s1.add((s[20] - 33) <= 0x5D)
s1.add((s[21] - 33) <= 0x5D)
s1.add((s[22] - 33) <= 0x5D)
s1.add((s[23] - 33) <= 0x5D)
s1.add((s[24] - 33) <= 0x5D)
s1.add((s[25] - 33) <= 0x5D)
s1.add((s[26] - 33) <= 0x5D)
s1.add((s[27] - 33) <= 0x5D)
s1.add((s[28] - 33) <= 0x5D)
s1.add((s[29] - 33) <= 0x5D)
s1.add((s[30] - 33) <= 0x5D)
s1.add((s[31] - 33) <= 0x5D)
s1.add((s[32] - 33) <= 0x5D)
s1.add((s[33] - 33) <= 0x5D)
s1.add((s[34] - 33) <= 0x5D)
s1.add((s[35] - 33) <= 0x5D)
s1.add((s[36] - 33) <= 0x5D)
s1.add((s[37] - 33) <= 0x5D)
s1.add((s[38] - 33) <= 0x5D)
s1.add((s[39] - 33) <= 0x5D)
s1.add((s[40] - 33) <= 0x5D)
s1.add((s[41] - 33) <= 0x5D)
s1.add((s[42] - 33) <= 0x5D)
s1.add((s[43] - 33) <= 0x5D)
s1.add((s[44] - 33) <= 0x5D)
s1.add((s[45] - 33) <= 0x5D)
s1.add((s[46] - 33) <= 0x5D)
s1.add((s[47] - 33) <= 0x5D)
s1.add((s[48] - 33) <= 0x5D)
s1.add((s[49] - 33) <= 0x5D)
s1.add((s[50] - 33) <= 0x5D)
s1.add((s[51] - 33) <= 0x5D)
s1.add((s[52] - 33) <= 0x5D)
s1.add((s[53] - 33) <= 0x5D)
s1.add(s[2] == 112)
s1.add(s[1] == 111)
s1.add((s[54] - 33) <= 0x5D)
s1.add(s[0] == 104)
s1.add(s[3] == 101)
s1.add((s[44] ^ s[19]) == 3)
s1.add((s[49] ^ s[52]) == 7)
s1.add(s[5] <= s[28])
s1.add((s[43] ^ s[7]) == 13)
s1.add(s[17] + s[13] == 212)
s1.add(s[32] - s[40] == 66)
s1.add(s[18] != 104)
s1.add((s[25] ^ s[6]) == 3)
s1.add((s[46] ^ s[29]) == 91)
s1.add(s[20] != s[39])
s1.add((s[21] ^ s[24]) == 11)
s1.add(s[36] == 103)
s1.add(s[51] != 111)
s1.add(s[37] + s[9] == 199)
s1.add(s[35] - s[15] == 15)
s1.add((s[48] ^ s[4]) == 79)
s1.add(s[10] >= s[23])
s1.add(s[38] >= s[53])
s1.add(s[22] <= s[54])
s1.add(s[50] + s[30] == 146)
s1.add(s[26] - s[16] == 19)
s1.add(s[11] >= s[42])
s1.add(s[14] != s[27])
s1.add(s[8] == 103)
s1.add(s[41] + s[12] == 205)
s1.add(s[31] - s[47] == 21)
s1.add(s[34] >= s[45])
s1.add(s[33] - s[12] == 19)
s1.add((s[42] ^ s[10]) == 68)
s1.add(s[43] + s[27] == 195)
s1.add(s[22] != s[54])
s1.add((s[48] ^ s[25]) == 91)
s1.add(s[23] + s[4] == 218)
s1.add(s[37] != 112)
s1.add(s[44] + s[52] == 149)
s1.add(s[11] == 95)
s1.add(s[14] == 116)
s1.add(s[19] != 103)
s1.add(s[16] + s[32] == 222)
s1.add(s[38] == 101)
s1.add(s[5] != s[34])
s1.add(s[9] != s[50])
s1.add(s[18] + s[24] == 218)
s1.add(s[46] >= s[53])
s1.add(s[6] - s[15] == 13)
s1.add(s[49] <= 0x6F)
s1.add(s[35] != s[51])
s1.add((s[45] ^ s[41]) == 86)
s1.add(s[7] >= s[40])
s1.add(s[17] + s[47] == 202)
s1.add(s[33] + s[13] == 233)
s1.add(s[5] <= s[9])
s1.add(s[21] >= s[42])
s1.add(s[20] != s[21])
s1.add(s[29] - s[28] == 4)
s1.add(s[26] != s[30])
s1.add(s[31] >= s[39])
s1.add(s[4] != s[22])
s1.add(s[19] <= s[32])
s1.add(s[23] + s[43] == 195)
s1.add(s[30] == 95)
s1.add(s[39] == 49)
s1.add(s[53] == 54)
s1.add(s[28] != s[40])
s1.add(s[33] != s[45])
s1.add(s[44] <= s[47])
s1.add((s[48] ^ s[17]) == 81)
s1.add(s[50] <= s[51])
s1.add(s[26] <= s[31])
s1.add(s[15] >= s[37])
s1.add(s[41] + s[16] == 202)
s1.add(s[13] != s[54])
s1.add(s[12] <= s[29])
s1.add((s[52] ^ s[25]) == 92)
s1.add(s[7] <= s[10])
s1.add((s[49] ^ s[24]) == 90)
s1.add(s[35] + s[27] == 205)
s1.add(s[34] == 105)
s1.add((s[20] ^ s[6]) == 21)
s1.add(s[46] == 54)
s1.add(s[18] != s[29])
s1.add(s[18] + s[50] == 159)
s1.add(s[23] != 103)
s1.add(s[45] != 54)
s1.add(s[37] + s[26] == 214)
s1.add(s[32] != s[48])
s1.add(s[7] <= s[31])
s1.add((s[28] ^ s[19]) == 8)
s1.add(s[16] >= s[51])
s1.add(s[10] != s[13])
s1.add(s[4] - s[15] == 28)
s1.add(s[9] - s[12] == 1)
s1.add(s[17] <= s[25])
s1.add(s[33] - s[22] == 22)
s1.add(s[20] - s[42] == 73)
s1.add(s[44] != 105)
s1.add(s[5] != 101)
s1.add((s[54] ^ s[24]) == 19)
s1.add(s[21] != s[49])
s1.add(s[40] > 0x30)
s1.add(s[27] == 95)
s1.add(s[52] == 51)
s1.add(s[47] + s[35] == 211)
s1.add(s[41] == 102)
s1.add(s[43] >= s[53])
s1.add(s[6] == 108)
s1.add(s[17] - s[40] == 45)
s1.add(s[7] + s[13] == 216)
s1.add(s[12] == 103)
s1.add(s[28] > 0x66)
s1.add(s[10] + s[50] == 167)
s1.add(s[19] >= s[45])
s1.add(s[26] == 119)
s1.add((s[44] ^ s[24]) == 12)
s1.add(s[32] != s[51])
s1.add(s[9] != s[49])
s1.add(s[42] == 48)
s1.add(s[25] == 111)
s1.add(s[23] != s[47])
s1.add(s[22] == 100)
s1.add(s[31] == 122)
s1.add(s[54] - s[4] == 2)
s1.add(s[16] == 100)
s1.add(s[37] == 95)
s1.add(s[20] == 121)
s1.add(s[15] >= s[48])
s1.add((s[21] ^ s[33]) == 31)
s1.add(s[7] == 105)
s1.add(s[29] == 109)
s1.add(s[18] - s[5] == 6)
s1.add(s[35] != 51)
s1.add(s[43] == 100)
s1.add(s[23] == 95)
s1.add(s[33] != 100)
s1.add(s[18] == 108)
s1.add(s[28] > 0x68)
s1.add(s[49] > 0x32)
s1.add(s[13] == 111)
s1.add(s[4] >= s[50])
s1.add(s[24] + s[32] == 232)
s1.add(s[45] != 116)
s1.add(s[5] == 102)
s1.add(s[53] <= 0x79)
s1.add(s[48] <= 0x7A)
s1.add(s[35] != 102)
s1.add((s[54] ^ s[40]) == 69)
s1.add(s[37] == 95)
s1.add(s[21] > 0x30)
s1.add(s[19] == 97)
s1.add(s[44] == 98)
s1.add(s[51] + s[10] == 170)
s1.add(s[15] <= 0x6F)
s1.add(s[17] == 101)
s1.add(s[47] == 101)
s1.add(s[47] + s[9] == 205)
s1.add(s[18] != 101)
s1.add(s[51] == 54)
s1.add(s[35] == 110)
s1.add(s[4] - s[10] == 7)
s1.add(s[21] == 101)
s1.add((s[40] ^ s[33]) == 66)
s1.add(s[50] == 51)
s1.add(s[54] > 0x6E)
s1.add(s[48] == 52)
s1.add(s[9] == 104)
s1.add(s[10] == 116)
s1.add(s[45] == 48)
s1.add(s[32] == 122)
s1.add(s[53] > 0x35)
s1.add(s[4] >= s[18])
s1.add((s[24] - 101) <= 0x14)
s1.add(s[15] == 95)
s1.add(s[54] == 125)
s1.add(s[28] >= s[40])
s1.add(s[33] > 0x61)
s1.add(s[54] != 122)
s1.add(s[49] == 52)
s1.add(s[40] == 56)
s1.add(s[48] == 52)
s1.add(s[28] == 105)
s1.add(s[18] == 108)
s1.add(s[49] == 52)
s1.add(s[4] == 123)

if s1.check() == sat:
    res = s1.model()
    for i in range(len(res)):
        print(chr(int(str(res[s[i]]))), end='')
        
